<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

    <context:property-placeholder location="classpath:appliaction.properties"/>

    <bean id="divideDataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close"
          p:url="${datasource.user.url}"
          p:username="${datasource.user.username}"
          p:password="${datasource.user.password}"
          p:initialSize="${datasource.user.initialSize}"
          p:minIdle="${datasource.user.minIdle}"
          p:maxActive="${datasource.user.maxActive}"
          p:maxWait="${datasource.user.maxWait}"
          p:timeBetweenEvictionRunsMillis="${datasource.user.timeBetweenEvictionRunsMillis}"
          p:minEvictableIdleTimeMillis="${datasource.user.minEvictableIdleTimeMillis}"
          p:validationQuery="${datasource.user.validationQuery}"
          p:testWhileIdle="${datasource.user.testWhileIdle}"
          p:testOnBorrow="${datasource.user.testOnBorrow}"
          p:testOnReturn="${datasource.user.testOnReturn}"
          p:poolPreparedStatements="${datasource.user.poolPreparedStatements}"
          p:maxPoolPreparedStatementPerConnectionSize="${datasource.user.maxPoolPreparedStatementPerConnectionSize}"
          p:connectionProperties="config.decrypt=true;config.decrypt.key=${datasource.user.publickey}"
          p:filters="${datasource.user.filters}">
    </bean>

    <bean id="divideSqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="divideDataSource" />
        <property name="typeAliasesPackage"
                  value="com.xcxcxcxcx.myshop.divide.dal.entity" />
        <property name="mapperLocations" value="classpath:mapper/*Mapper.xml" />
    </bean>

    <bean name="divideMapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage"
                  value="com.xcxcxcxcx.myshop.divide.dal.persistence" />
        <property name="sqlSessionFactoryBeanName" value="divideSqlSessionFactory" />
    </bean>

    <!-- jedis 配置 -->
    <bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <property name="maxIdle" value="${redis.maxIdle}" />
        <property name="maxWaitMillis" value="${redis.maxWaitMillis}" />
        <property name="maxTotal" value="${redis.maxTotal}" />
        <property name="testOnBorrow" value="${redis.testOnBorrow}" />
    </bean>

    <!-- redis服务器中心 -->
    <bean id="redisConnectionFactory"
          class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
        <property name="poolConfig" ref="poolConfig" />
        <property name="port" value="${redis.port}" />
        <property name="hostName" value="${redis.host}" />
        <property name="password" value="${redis.password}" />
        <property name="timeout" value="${redis.timeout}"></property>
    </bean>

    <bean id="redisTemplate" name="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
        <property name="connectionFactory" ref="redisConnectionFactory" />
        <property name="keySerializer" ref="stringRedisSerializer" />
        <property name="valueSerializer" ref="stringRedisSerializer" />
        <property name="hashKeySerializer" ref="stringRedisSerializer" />
        <property name="hashValueSerializer" ref="jackson2JsonRedisSerializer" />
    </bean>

    <bean id="stringRedisSerializer"
          class="org.springframework.data.redis.serializer.StringRedisSerializer" />
    <bean id="jackson2JsonRedisSerializer"
          class="org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer" />

    <context:component-scan base-package="com.xcxcxcxcx.myshop.divide.dal" />
    <context:component-scan base-package="com.xcxcxcxcx.myshop.divide.service" />
    <context:component-scan base-package="com.xcxcxcxcx.myshop.divide.notify" />

</beans>